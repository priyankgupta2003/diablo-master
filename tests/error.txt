Imperative program:
BlockS(List(VarDeclS(M,
                     None(),
                     Some(Call(rdd_block_tensor_2_0,
                               List(Tuple(List(IntConst(100), IntConst(100))),
                                    Tuple(List()),
                                    Comprehension(Tuple(List(Tuple(List(Var(i),
                                                                        Var(j))),
                                                             MethodCall(MethodCall(Var(i),
                                                                                   *,
                                                                                   List(IntConst(100))),
                                                                        +,
                                                                        List(Var(j))))),
                                                  List(Generator(VarPat(i),
                                                                 Range(IntConst(0),
                                                                       IntConst(99),
                                                                       IntConst(1))),
                                                       Generator(VarPat(j),
                                                                 Range(IntConst(0),
                                                                       IntConst(99),
                                                                       IntConst(1))))))))),
            VarDeclS(N,
                     None(),
                     Some(Call(rdd_block_tensor_2_0,
                               List(Tuple(List(IntConst(100), IntConst(100))),
                                    Tuple(List()),
                                    Comprehension(Tuple(List(Tuple(List(Var(i),
                                                                        Var(j))),
                                                             MethodCall(MethodCall(Var(i),
                                                                                   *,
                                                                                   List(IntConst(100))),
                                                                        +,
                                                                        List(Var(j))))),
                                                  List(Generator(VarPat(i),
                                                                 Range(IntConst(0),
                                                                       IntConst(99),
                                                                       IntConst(1))),
                                                       Generator(VarPat(j),
                                                                 Range(IntConst(0),
                                                                       IntConst(99),
                                                                       IntConst(1))))))))),
            ExprS(MethodCall(Var(M), +, List(Var(N))))))
Loading rdd_block_tensor_2_0:
       typemap rdd_block_tensor_2_0[T] ( d: (Int,Int), s: () ): array2[T] {
          def view ( x: rdd[((Int,Int),tensor_2_0[T])] )
            = [ ((ii1 * 10 + i1,ii2 * 10 + i2),v) |
                ((ii1,ii2),a) <- lift(rdd,x),
                ((i1,i2),v) <- lift(tensor_2_0,a),
                ii1 * 10 + i1 >= 0, ii1 * 10 + i1 < d#1, ii2 * 10 + i2 >= 0, ii2 * 10 + i2 < d#2 ]
          def store ( L: list[((Int,Int),T)] )
            = rdd[ ((ii1,ii2),tensor_2_0((if ((ii1+1)*10 > d#1) (d#1 % 10) else 10,if ((ii2+1)*10 > d#2) (d#2 % 10) else 10),(),w)) |
                   ((i1,i2),v) <- L,
                   let ii1 = i1 / 10,let ii2 = i2 / 10,
                   let w = ((i1 % 10,i2 % 10),v),
                   group by (ii1,ii2) ]
    }
    
Loading tensor_2_0:
       typemap tensor_2_0[T] ( d: (Int,Int), s: () ): array2[T] {
          def view ( values: vector[T] )
            = [ ((i1,i2),values[(i1*d#2+i2)]) |
                i1 <- 0..(d#1-1), i2 <- 0..(d#2-1) ]
          def store ( L: list[((Int,Int),T)] )
            = { var zero: T;
                var buffer: vector[T] = array_buffer_dense(d#1*d#2,zero);
                [ { buffer[(i1*d#2+i2)] = v } |
                  ((i1,i2),v) <- L, i1 >= 0, i1 < d#1, i2 >= 0, i2 < d#2 ];
                buffer }
       }
      
printing from trasnlator-----Seq(List(Comprehension(Tuple(List(Tuple(List(Var(_v40), Var(_v41))), MethodCall(Var(_v38),+,List(Var(_v39))))),List(Generator(VarPat(_v38),Comprehension(MethodCall(Var(_v37),*,List(Var(_v36))),List(Generator(VarPat(_v37),Seq(List(Var(i)))), Generator(VarPat(_v36),Seq(List(IntConst(100))))))), Generator(VarPat(_v39),Seq(List(Var(j)))), Generator(TuplePat(List(TuplePat(List(VarPat(_v40), VarPat(_v41))), VarPat(_v38))),MethodCall(Var(i),*,List(IntConst(100)))), Generator(TuplePat(List(TuplePat(List(VarPat(_v42), VarPat(_v43))), VarPat(_v39))),Var(j)), Predicate(MethodCall(Var(_v42),==,List(Var(_v40)))), Predicate(MethodCall(Var(_v43),==,List(Var(_v41))))))))
printing from trasnlator-----Seq(List(Comprehension(Tuple(List(Tuple(List(Var(_v66), Var(_v67))), MethodCall(Var(_v64),+,List(Var(_v65))))),List(Generator(VarPat(_v64),Comprehension(MethodCall(Var(_v63),*,List(Var(_v62))),List(Generator(VarPat(_v63),Seq(List(Var(i)))), Generator(VarPat(_v62),Seq(List(IntConst(100))))))), Generator(VarPat(_v65),Seq(List(Var(j)))), Generator(TuplePat(List(TuplePat(List(VarPat(_v66), VarPat(_v67))), VarPat(_v64))),MethodCall(Var(i),*,List(IntConst(100)))), Generator(TuplePat(List(TuplePat(List(VarPat(_v68), VarPat(_v69))), VarPat(_v65))),Var(j)), Predicate(MethodCall(Var(_v68),==,List(Var(_v66)))), Predicate(MethodCall(Var(_v69),==,List(Var(_v67))))))))
printing from trasnlator-----Seq(List(Comprehension(Tuple(List(Tuple(List(Var(_v73), Var(_v74))), MethodCall(Var(_v71),+,List(Var(_v72))))),List(Generator(VarPat(_v71),Seq(List(Var(M)))), Generator(VarPat(_v72),Seq(List(Var(N)))), Generator(TuplePat(List(TuplePat(List(VarPat(_v73), VarPat(_v74))), VarPat(_v71))),Var(M)), Generator(TuplePat(List(TuplePat(List(VarPat(_v75), VarPat(_v76))), VarPat(_v72))),Var(N)), Predicate(MethodCall(Var(_v75),==,List(Var(_v73)))), Predicate(MethodCall(Var(_v76),==,List(Var(_v74))))))))
Normalized comprehension:
Block(List(VarDecl(M,
                   ArrayType(2, BasicType(Int)),
                   Seq(List(Call(rdd_block_tensor_2_0,
                                 List(Tuple(List(IntConst(100), IntConst(100))),
                                      Tuple(List()),
                                      Comprehension(Tuple(List(Tuple(List(Var(i),
                                                                          Var(j))),
                                                               Comprehension(Tuple(List(Tuple(List(Var(_v40),
                                                                                                   Var(_v41))),
                                                                                        MethodCall(Var(_v38),
                                                                                                   +,
                                                                                                   List(Var(_v39))))),
                                                                             List(Generator(TuplePat(List(TuplePat(List(VarPat(_v40),
                                                                                                                        VarPat(_v41))),
                                                                                                          VarPat(_v38))),
                                                                                            MethodCall(Var(i),
                                                                                                       *,
                                                                                                       List(IntConst(100)))),
                                                                                  Generator(TuplePat(List(TuplePat(List(VarPat(_v42),
                                                                                                                        VarPat(_v43))),
                                                                                                          VarPat(_v39))),
                                                                                            Var(j)),
                                                                                  Predicate(MethodCall(Var(_v42),
                                                                                                       ==,
                                                                                                       List(Var(_v40)))),
                                                                                  Predicate(MethodCall(Var(_v43),
                                                                                                       ==,
                                                                                                       List(Var(_v41)))))))),
                                                    List(Generator(VarPat(i),
                                                                   Range(IntConst(0),
                                                                         IntConst(99),
                                                                         IntConst(1))),
                                                         Generator(VarPat(j),
                                                                   Range(IntConst(0),
                                                                         IntConst(99),
                                                                         IntConst(1)))))))))),
           VarDecl(N,
                   ArrayType(2, BasicType(Int)),
                   Seq(List(Call(rdd_block_tensor_2_0,
                                 List(Tuple(List(IntConst(100), IntConst(100))),
                                      Tuple(List()),
                                      Comprehension(Tuple(List(Tuple(List(Var(i),
                                                                          Var(j))),
                                                               Comprehension(Tuple(List(Tuple(List(Var(_v66),
                                                                                                   Var(_v67))),
                                                                                        MethodCall(Var(_v64),
                                                                                                   +,
                                                                                                   List(Var(_v65))))),
                                                                             List(Generator(TuplePat(List(TuplePat(List(VarPat(_v66),
                                                                                                                        VarPat(_v67))),
                                                                                                          VarPat(_v64))),
                                                                                            MethodCall(Var(i),
                                                                                                       *,
                                                                                                       List(IntConst(100)))),
                                                                                  Generator(TuplePat(List(TuplePat(List(VarPat(_v68),
                                                                                                                        VarPat(_v69))),
                                                                                                          VarPat(_v65))),
                                                                                            Var(j)),
                                                                                  Predicate(MethodCall(Var(_v68),
                                                                                                       ==,
                                                                                                       List(Var(_v66)))),
                                                                                  Predicate(MethodCall(Var(_v69),
                                                                                                       ==,
                                                                                                       List(Var(_v67)))))))),
                                                    List(Generator(VarPat(i),
                                                                   Range(IntConst(0),
                                                                         IntConst(99),
                                                                         IntConst(1))),
                                                         Generator(VarPat(j),
                                                                   Range(IntConst(0),
                                                                         IntConst(99),
                                                                         IntConst(1)))))))))),
           Seq(List(Comprehension(Tuple(List(Tuple(List(Var(_v73),
                                                        Var(_v74))),
                                             MethodCall(Var(_v71),
                                                        +,
                                                        List(Var(_v72))))),
                                  List(Generator(TuplePat(List(TuplePat(List(VarPat(_v73),
                                                                             VarPat(_v74))),
                                                               VarPat(_v71))),
                                                 Var(M)),
                                       Generator(TuplePat(List(TuplePat(List(VarPat(_v75),
                                                                             VarPat(_v76))),
                                                               VarPat(_v72))),
                                                 Var(N)),
                                       Predicate(MethodCall(Var(_v75),
                                                            ==,
                                                            List(Var(_v73)))),
                                       Predicate(MethodCall(Var(_v76),
                                                            ==,
                                                            List(Var(_v74))))))))))
mult-add.scala:14: error: exception during macro expansion:
java.lang.Error: Type BasicType(Int) is not a collection (found BasicType(Int))
	at edu.uta.diablo.Typechecker$.elemType(Typechecker.scala:169)
	at edu.uta.diablo.Lifting$.$anonfun$lift_expr$7(Lifting.scala:237)
	at scala.collection.LinearSeqOptimized.foldLeft(LinearSeqOptimized.scala:126)
	at scala.collection.LinearSeqOptimized.foldLeft$(LinearSeqOptimized.scala:122)
	at scala.collection.immutable.List.foldLeft(List.scala:91)
	at edu.uta.diablo.Lifting$.lift_expr(Lifting.scala:203)
	at edu.uta.diablo.Lifting$.$anonfun$lift_expr$12(Lifting.scala:262)
	at scala.collection.immutable.List.map(List.scala:297)
	at edu.uta.diablo.AST$.apply(AST.scala:195)
	at edu.uta.diablo.Lifting$.lift_expr(Lifting.scala:262)
	at edu.uta.diablo.Lifting$.lift_expr(Lifting.scala:258)
	at edu.uta.diablo.Lifting$.lift_expr(Lifting.scala:176)
	at edu.uta.diablo.Lifting$.$anonfun$lift_expr$12(Lifting.scala:262)
	at scala.collection.immutable.List.map(List.scala:293)
	at edu.uta.diablo.AST$.apply(AST.scala:201)
	at edu.uta.diablo.Lifting$.lift_expr(Lifting.scala:262)
	at edu.uta.diablo.Lifting$.$anonfun$lift_expr$2(Lifting.scala:163)
	at scala.collection.LinearSeqOptimized.foldLeft(LinearSeqOptimized.scala:126)
	at scala.collection.LinearSeqOptimized.foldLeft$(LinearSeqOptimized.scala:122)
	at scala.collection.immutable.List.foldLeft(List.scala:91)
	at edu.uta.diablo.Lifting$.lift_expr(Lifting.scala:152)
	at edu.uta.diablo.Lifting$.lift(Lifting.scala:303)
	at edu.uta.diablo.package$.q_impl(diablo.scala:115)

    val x = q("""
             ^
one error found
