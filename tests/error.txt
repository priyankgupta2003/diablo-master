Imperative program:
BlockS(List(VarDeclS(M,
                     None(),
                     Some(Call(rdd_block_tensor_2_0,
                               List(Tuple(List(IntConst(10), IntConst(10))),
                                    Tuple(List()),
                                    Comprehension(Tuple(List(Tuple(List(Var(i),
                                                                        Var(j))),
                                                             MethodCall(MethodCall(Var(i),
                                                                                   *,
                                                                                   List(IntConst(100))),
                                                                        +,
                                                                        List(Var(j))))),
                                                  List(Generator(VarPat(i),
                                                                 Range(IntConst(0),
                                                                       IntConst(10),
                                                                       IntConst(1))),
                                                       Generator(VarPat(j),
                                                                 Range(IntConst(0),
                                                                       IntConst(10),
                                                                       IntConst(1))))))))),
            VarDeclS(N,
                     None(),
                     Some(Call(rdd_block_tensor_2_0,
                               List(Tuple(List(IntConst(10), IntConst(10))),
                                    Tuple(List()),
                                    Comprehension(Tuple(List(Tuple(List(Var(i),
                                                                        Var(j))),
                                                             MethodCall(Var(i),
                                                                        *,
                                                                        List(IntConst(100))))),
                                                  List(Generator(VarPat(i),
                                                                 Range(IntConst(0),
                                                                       IntConst(10),
                                                                       IntConst(1))),
                                                       Generator(VarPat(j),
                                                                 Range(IntConst(0),
                                                                       IntConst(10),
                                                                       IntConst(1))))))))),
            ExprS(MethodCall(Var(M), @@, List(Var(N))))))
Loading rdd_block_tensor_2_0:
       typemap rdd_block_tensor_2_0[T] ( d: (Int,Int), s: () ): array2[T] {
          def view ( x: rdd[((Int,Int),tensor_2_0[T])] )
            = [ ((ii1 * 10 + i1,ii2 * 10 + i2),v) |
                ((ii1,ii2),a) <- lift(rdd,x),
                ((i1,i2),v) <- lift(tensor_2_0,a),
                ii1 * 10 + i1 >= 0, ii1 * 10 + i1 < d#1, ii2 * 10 + i2 >= 0, ii2 * 10 + i2 < d#2 ]
          def store ( L: list[((Int,Int),T)] )
            = rdd[ ((ii1,ii2),tensor_2_0((if ((ii1+1)*10 > d#1) (d#1 % 10) else 10,if ((ii2+1)*10 > d#2) (d#2 % 10) else 10),(),w)) |
                   ((i1,i2),v) <- L,
                   let ii1 = i1 / 10,let ii2 = i2 / 10,
                   let w = ((i1 % 10,i2 % 10),v),
                   group by (ii1,ii2) ]
    }
    
Loading tensor_2_0:
       typemap tensor_2_0[T] ( d: (Int,Int), s: () ): array2[T] {
          def view ( values: vector[T] )
            = [ ((i1,i2),values[(i1*d#2+i2)]) |
                i1 <- 0..(d#1-1), i2 <- 0..(d#2-1) ]
          def store ( L: list[((Int,Int),T)] )
            = { var zero: T;
                var buffer: vector[T] = array_buffer_dense(d#1*d#2,zero);
                [ { buffer[(i1*d#2+i2)] = v } |
                  ((i1,i2),v) <- L, i1 >= 0, i1 < d#1, i2 >= 0, i2 < d#2 ];
                buffer }
       }
      
---Printing from Translator---Seq(List(Comprehension(Tuple(List(Tuple(List(Var(_v63), Var(_v64))), reduce(+,Var(_v67)))),List(Generator(VarPat(_v61),Seq(List(Var(M)))), Generator(VarPat(_v62),Seq(List(Var(N)))), Predicate(MethodCall(Var(_v65),==,List(Var(_v66)))), LetBinding(VarPat(_v67),MethodCall(Var(_v61),*,List(Var(_v62)))), GroupByQual(TuplePat(List(VarPat(_v63), VarPat(_v64))),Tuple(List(Var(_v63), Var(_v64))))))))Normalized comprehension:
Block(List(VarDecl(M,
                   ArrayType(2, BasicType(Int)),
                   Seq(List(Call(rdd_block_tensor_2_0,
                                 List(Tuple(List(IntConst(10), IntConst(10))),
                                      Tuple(List()),
                                      Comprehension(Tuple(List(Tuple(List(Var(i),
                                                                          Var(j))),
                                                               MethodCall(MethodCall(Var(i),
                                                                                     *,
                                                                                     List(IntConst(100))),
                                                                          +,
                                                                          List(Var(j))))),
                                                    List(Generator(VarPat(i),
                                                                   Range(IntConst(0),
                                                                         IntConst(10),
                                                                         IntConst(1))),
                                                         Generator(VarPat(j),
                                                                   Range(IntConst(0),
                                                                         IntConst(10),
                                                                         IntConst(1)))))))))),
           VarDecl(N,
                   ArrayType(2, BasicType(Int)),
                   Seq(List(Call(rdd_block_tensor_2_0,
                                 List(Tuple(List(IntConst(10), IntConst(10))),
                                      Tuple(List()),
                                      Comprehension(Tuple(List(Tuple(List(Var(i),
                                                                          Var(j))),
                                                               MethodCall(Var(i),
                                                                          *,
                                                                          List(IntConst(100))))),
                                                    List(Generator(VarPat(i),
                                                                   Range(IntConst(0),
                                                                         IntConst(10),
                                                                         IntConst(1))),
                                                         Generator(VarPat(j),
                                                                   Range(IntConst(0),
                                                                         IntConst(10),
                                                                         IntConst(1)))))))))),
           Seq(List(IfE(MethodCall(Var(_v65), ==, List(Var(_v66))),
                        Comprehension(Tuple(List(Tuple(List(Var(_v63),
                                                            Var(_v64))),
                                                 reduce(+, Var(_v67)))),
                                      List(LetBinding(VarPat(_v67),
                                                      MethodCall(Var(M),
                                                                 *,
                                                                 List(Var(N)))),
                                           GroupByQual(TuplePat(List(VarPat(_v63),
                                                                     VarPat(_v64))),
                                                       Tuple(List(Var(_v63),
                                                                  Var(_v64)))))),
                        Seq(List()))))))
mult-add.scala:14: error: exception during macro expansion:
java.lang.Error: Wrong method call: MethodCall(Var(M),*,List(Var(N))) for type ArrayType(2,BasicType(Int))  (List(StorageType(rdd_block_tensor_2_0,List(BasicType(Int)),List(Tuple(List(IntConst(10), IntConst(10))), Tuple(List())))))
Found in: MethodCall(Var(M),*,List(Var(N)))
with env: Map(M -> StorageType(rdd_block_tensor_2_0,List(BasicType(Int)),List(Tuple(List(IntConst(10), IntConst(10))), Tuple(List()))), N -> StorageType(rdd_block_tensor_2_0,List(BasicType(Int)),List(Tuple(List(IntConst(10), IntConst(10))), Tuple(List()))))
	at edu.uta.diablo.Typechecker$.typecheck(Typechecker.scala:674)
	at edu.uta.diablo.Lifting$.$anonfun$lift_expr$7(Lifting.scala:242)
	at scala.collection.LinearSeqOptimized.foldLeft(LinearSeqOptimized.scala:126)
	at scala.collection.LinearSeqOptimized.foldLeft$(LinearSeqOptimized.scala:122)
	at scala.collection.immutable.List.foldLeft(List.scala:91)
	at edu.uta.diablo.Lifting$.lift_expr(Lifting.scala:203)
	at edu.uta.diablo.Lifting$.$anonfun$lift_expr$12(Lifting.scala:262)
	at edu.uta.diablo.AST$.apply(AST.scala:191)
	at edu.uta.diablo.Lifting$.lift_expr(Lifting.scala:262)
	at edu.uta.diablo.Lifting$.$anonfun$lift_expr$12(Lifting.scala:262)
	at scala.collection.immutable.List.map(List.scala:293)
	at edu.uta.diablo.AST$.apply(AST.scala:201)
	at edu.uta.diablo.Lifting$.lift_expr(Lifting.scala:262)
	at edu.uta.diablo.Lifting$.$anonfun$lift_expr$2(Lifting.scala:171)
	at scala.collection.LinearSeqOptimized.foldLeft(LinearSeqOptimized.scala:126)
	at scala.collection.LinearSeqOptimized.foldLeft$(LinearSeqOptimized.scala:122)
	at scala.collection.immutable.List.foldLeft(List.scala:91)
	at edu.uta.diablo.Lifting$.lift_expr(Lifting.scala:152)
	at edu.uta.diablo.Lifting$.lift(Lifting.scala:303)
	at edu.uta.diablo.package$.q_impl(diablo.scala:115)

    val x = q("""
             ^
one error found
